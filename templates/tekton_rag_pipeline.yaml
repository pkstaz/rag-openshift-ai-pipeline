apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ .Values.pipelineName }}
  namespace: {{ .Values.namespace }}
spec:
  params:
  - name: minio-endpoint
    default: "{{ .Values.minioEndpoint }}"
  - name: minio-access-key
    default: "{{ .Values.minioAccessKey }}"
  - name: minio-secret-key
    default: "{{ .Values.minioSecretKey }}"
  - name: bucket-name
    default: "{{ .Values.bucketName }}"
  - name: object-key
    default: "{{ .Values.objectKey }}"
  - name: chunk-size
    default: "{{ .Values.chunkSize }}"
  - name: chunk-overlap
    default: "{{ .Values.chunkOverlap }}"
  - name: elasticsearch-endpoint
    default: "{{ .Values.elasticsearchEndpoint }}"
  - name: elasticsearch-username
    default: "{{ .Values.elasticsearchUsername }}"
  - name: elasticsearch-password
    default: "{{ .Values.elasticsearchPassword }}"

  tasks:
  - name: validate-connections
    taskSpec:
      params:
      - name: minio-endpoint
      - name: minio-access-key
      - name: minio-secret-key
      - name: elasticsearch-endpoint
      - name: elasticsearch-username
      - name: elasticsearch-password
      steps:
      - name: validate
        image: python:3.9
        script: |
          #!/usr/bin/env python3
          import os
          os.system("pip install --quiet minio requests")
          from minio import Minio
          import requests

          print("üîé Validating connection to MinIO...")
          minio_endpoint = "$(params.minio-endpoint)"
          minio_access_key = "$(params.minio-access-key)"
          minio_secret_key = "$(params.minio-secret-key)"
          try:
              minio_client = Minio(
                  minio_endpoint,
                  access_key=minio_access_key,
                  secret_key=minio_secret_key,
                  secure=True
              )
              buckets = minio_client.list_buckets()
              print(f"‚úÖ Connection successful to MinIO. Buckets: {[b.name for b in buckets]}")
          except Exception as e:
              print(f"‚ùå ERROR connecting to MinIO: {e}")
              exit(1)

          print("üîé Validating connection to Elasticsearch...")
          es_endpoint = "$(params.elasticsearch-endpoint)"
          es_user = "$(params.elasticsearch-username)"
          es_pass = "$(params.elasticsearch-password)"
          print(f"[DEBUG] Actual es_endpoint value: {es_endpoint}")
          if es_user and es_pass:
              auth = (es_user, es_pass)
          else:
              auth = None
          try:
              resp = requests.get(es_endpoint, auth=auth, timeout=5, verify=False)
              print(f"‚úÖ Connection successful to Elasticsearch. Status: {resp.status_code}")
              print(f"Response: {resp.text[:200]}")
          except Exception as e:
              print(f"‚ùå ERROR connecting to Elasticsearch: {e}")
              exit(1)
    params:
    - name: minio-endpoint
      value: {{ .Values.minioEndpoint }}
    - name: minio-access-key
      value: {{ .Values.minioAccessKey }}
    - name: minio-secret-key
      value: {{ .Values.minioSecretKey }}
    - name: elasticsearch-endpoint
      value: {{ .Values.elasticsearchEndpoint | quote }}
    - name: elasticsearch-username
      value: {{ .Values.elasticsearchUsername | quote }}
    - name: elasticsearch-password
      value: {{ .Values.elasticsearchPassword | quote }}

  - name: extract-text
    runAfter: ["validate-connections"]
    taskSpec:
      params:
      - name: minio-endpoint
      - name: minio-access-key
      - name: minio-secret-key
      - name: bucket-name
      - name: object-key
      results:
      - name: text-url
        description: MinIO URL of extracted text file
      steps:
      - name: extract
        image: python:3.9
        script: |
          #!/usr/bin/env python3
          import os
          os.system("pip install --quiet minio requests PyPDF2 python-docx chardet")
          import sys
          import tempfile
          from minio import Minio
          from datetime import datetime
          import mimetypes

          print("üöÄ Starting text extraction...")
          print(f"üìä Python version: {sys.version}")

          minio_endpoint = "$(params.minio-endpoint)"
          minio_access_key = "$(params.minio-access-key)"
          minio_secret_key = "$(params.minio-secret-key)"
          bucket_name = "$(params.bucket-name)"
          object_key = "$(params.object-key)"

          minio_client = Minio(
              minio_endpoint,
              access_key=minio_access_key,
              secret_key=minio_secret_key,
              secure=True
          )

          def extract_text_from_pdf(pdf_path):
              from PyPDF2 import PdfReader
              text = ""
              try:
                  reader = PdfReader(pdf_path)
                  for page in reader.pages:
                      text += page.extract_text() or ""
              except Exception as e:
                  print(f"‚ùå Error extracting PDF text: {e}")
              return text

          def extract_text_from_docx(docx_path):
              from docx import Document
              text = ""
              try:
                  doc = Document(docx_path)
                  for para in doc.paragraphs:
                      text += para.text + "\n"
              except Exception as e:
                  print(f"‚ùå Error extracting DOCX text: {e}")
              return text

          def extract_text_from_txt(txt_path):
              import chardet
              with open(txt_path, 'rb') as f:
                  raw = f.read()
                  encoding = chardet.detect(raw)['encoding'] or 'utf-8'
                  return raw.decode(encoding, errors='replace')

          try:
              print(f"üîó Connecting to MinIO: {minio_endpoint}")
              # Download file from MinIO
              suffix = os.path.splitext(object_key)[-1].lower()
              with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as temp_file:
                  temp_path = temp_file.name
              minio_client.fget_object(bucket_name, object_key, temp_path)
              print(f"‚úÖ File downloaded to: {temp_path}")

              # Detect file type and extract text
              print(f"üîç Detecting file type: {suffix}")
              if suffix == '.pdf':
                  content = extract_text_from_pdf(temp_path)
              elif suffix == '.docx':
                  content = extract_text_from_docx(temp_path)
              elif suffix == '.txt':
                  content = extract_text_from_txt(temp_path)
              else:
                  print(f"‚ùå Unsupported file type: {suffix}")
                  content = ""

              if not content or content.strip() == "":
                  print("‚ö†Ô∏è No text extracted from file.")
                  content = f"[EMPTY OR UNSUPPORTED FILE: {object_key}]"

              # Save extracted text to MinIO (processed-documents/extracted-texts/)
              extracted_bucket = "processed-documents"
              extracted_prefix = "extracted-texts/"
              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              extracted_filename = f"{extracted_prefix}{object_key}_{timestamp}.txt"
              with tempfile.NamedTemporaryFile(delete=False, suffix='.txt') as out_file:
                  out_file.write(content.encode('utf-8'))
                  out_path = out_file.name
              minio_client.fput_object(extracted_bucket, extracted_filename, out_path)
              print(f"‚úÖ Extracted text uploaded to MinIO: {extracted_bucket}/{extracted_filename}")

              # Clean up
              os.unlink(temp_path)
              os.unlink(out_path)

              # Write MinIO URL as result
              minio_url = f"minio://{extracted_bucket}/{extracted_filename}"
              os.makedirs("/tekton/results", exist_ok=True)
              with open("/tekton/results/text-url", "w", encoding='utf-8') as f:
                  f.write(minio_url)
              print(f"‚úÖ Result written to: /tekton/results/text-url")
              print(f"üìä MinIO URL: {minio_url}")

          except Exception as e:
              print(f"‚ùå Error in extraction: {str(e)}")
              import traceback
              traceback.print_exc()
              os.makedirs("/tekton/results", exist_ok=True)
              error_msg = f"Error extracting text: {str(e)}"
              with open("/tekton/results/text-url", "w") as f:
                  f.write(error_msg)
              print("‚ö†Ô∏è Error logged to results, continuing...")
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 200m
    params:
    - name: minio-endpoint
      value: $(params.minio-endpoint)
    - name: minio-access-key
      value: $(params.minio-access-key)
    - name: minio-secret-key
      value: $(params.minio-secret-key)
    - name: bucket-name
      value: $(params.bucket-name)
    - name: object-key
      value: $(params.object-key)

  - name: chunk-text
    runAfter: ["extract-text"]
    taskSpec:
      params:
      - name: text-url
        description: MinIO URL of extracted text file
      - name: minio-endpoint
      - name: minio-access-key
      - name: minio-secret-key
      - name: chunk-size
      - name: chunk-overlap
      results:
      - name: chunks-url
        description: MinIO URL of chunks JSON file
      steps:
      - name: chunk
        image: python:3.9
        script: |
          #!/usr/bin/env python3
          import os
          os.system("pip install --quiet minio")
          import base64
          import json
          from minio import Minio
          import tempfile
          from datetime import datetime

          print("üöÄ Starting chunking process...")

          text_url = "$(params.text-url)"
          minio_endpoint = "$(params.minio-endpoint)"
          minio_access_key = "$(params.minio-access-key)"
          minio_secret_key = "$(params.minio-secret-key)"
          chunk_size = int("$(params.chunk-size)")
          chunk_overlap = int("$(params.chunk-overlap)")

          # Download text file from MinIO
          if not text_url.startswith("minio://"):
              print(f"‚ùå Invalid text_url: {text_url}")
              exit(1)
          path = text_url.replace("minio://", "", 1)
          bucket, object_name = path.split("/", 1)
          minio_client = Minio(
              minio_endpoint,
              access_key=minio_access_key,
              secret_key=minio_secret_key,
              secure=True
          )
          with tempfile.NamedTemporaryFile(delete=False, suffix='.txt') as temp_file:
              temp_path = temp_file.name
          minio_client.fget_object(bucket, object_name, temp_path)
          print(f"‚úÖ Downloaded text file from MinIO: {bucket}/{object_name}")

          # Read content
          with open(temp_path, 'r', encoding='utf-8', errors='replace') as f:
              text_content = f.read()
          os.unlink(temp_path)

          print(f"üìù Received text length: {len(text_content)} characters")
          print(f"üìÑ Text preview: {text_content[:200]}...")

          try:
              if not text_content or text_content.strip() == "":
                  print("‚ö†Ô∏è Empty text content received")
                  chunks = []
              elif text_content.startswith("Error"):
                  print("‚ö†Ô∏è Error in previous task, creating error chunk")
                  chunks = [{
                      "chunk_id": "chunk_error",
                      "text": text_content,
                      "char_count": len(text_content),
                      "error": True
                  }]
              else:
                  max_chars = chunk_size * 4
                  overlap_chars = chunk_overlap * 4
                  chunks = []
                  start = 0
                  chunk_id = 0
                  print(f"üîß Calculated max_chars: {max_chars}, overlap_chars: {overlap_chars}")
                  while start < len(text_content):
                      end = min(start + max_chars, len(text_content))
                      chunk_text = text_content[start:end]
                      if end < len(text_content):
                          space_pos = chunk_text.rfind(' ', int(len(chunk_text) * 0.8))
                          if space_pos > 0:
                              chunk_text = chunk_text[:space_pos]
                              end = start + space_pos
                      chunk_text = chunk_text.strip()
                      if len(chunk_text) > 10:
                          chunk_data = {
                              "chunk_id": f"chunk_{chunk_id:04d}",
                              "text": chunk_text,
                              "char_count": len(chunk_text),
                              "start_pos": start,
                              "end_pos": start + len(chunk_text)
                          }
                          chunks.append(chunk_data)
                          chunk_id += 1
                          print(f"‚úÖ Created chunk {chunk_id}: {len(chunk_text)} chars")
                      if end >= len(text_content):
                          break
                      start = max(end - overlap_chars, start + 1)
              result = json.dumps(chunks, ensure_ascii=False)
              print(f"‚úÖ Created JSON result with {len(chunks)} chunks")

              # Save chunks JSON to MinIO
              chunks_bucket = "processed-documents"
              chunks_prefix = "chunks/"
              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              chunks_filename = f"{chunks_prefix}{object_name}_{timestamp}_chunks.json"
              with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as out_file:
                  out_file.write(result.encode('utf-8'))
                  out_path = out_file.name
              minio_client.fput_object(chunks_bucket, chunks_filename, out_path)
              print(f"‚úÖ Chunks JSON uploaded to MinIO: {chunks_bucket}/{chunks_filename}")
              os.unlink(out_path)

              # Write MinIO URL as result
              minio_url = f"minio://{chunks_bucket}/{chunks_filename}"
              os.makedirs("/tekton/results", exist_ok=True)
              with open("/tekton/results/chunks-url", "w", encoding='utf-8') as f:
                  f.write(minio_url)
              print(f"‚úÖ Result written to: /tekton/results/chunks-url")
              print(f"üìä MinIO URL: {minio_url}")
          except Exception as e:
              print(f"‚ùå Error in chunking: {str(e)}")
              import traceback
              traceback.print_exc()
              os.makedirs("/tekton/results", exist_ok=True)
              error_msg = f"Error chunking text: {str(e)}"
              with open("/tekton/results/chunks-url", "w") as f:
                  f.write(error_msg)
              print("‚ö†Ô∏è Error logged to results, continuing...")
        resources:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
            cpu: 100m
    params:
    - name: text-url
      value: $(tasks.extract-text.results.text-url)
    - name: minio-endpoint
      value: $(params.minio-endpoint)
    - name: minio-access-key
      value: $(params.minio-access-key)
    - name: minio-secret-key
      value: $(params.minio-secret-key)
    - name: chunk-size
      value: $(params.chunk-size)
    - name: chunk-overlap
      value: $(params.chunk-overlap)

  - name: generate-embeddings
    runAfter: ["chunk-text"]
    taskSpec:
      params:
      - name: chunks-url
        description: MinIO URL of chunks JSON file
      - name: minio-endpoint
      - name: minio-access-key
      - name: minio-secret-key
      - name: object-key
      results:
      - name: status
        description: Processing status
      steps:
      - name: embed
        image: python:3.9
        script: |
          #!/usr/bin/env python3
          import os
          os.system("pip install --quiet sentence-transformers torch numpy minio")
          import json
          import tempfile
          from datetime import datetime
          from sentence_transformers import SentenceTransformer
          import torch
          from minio import Minio
          import base64

          print("üöÄ Starting embedding generation...")

          # Get chunks from MinIO
          chunks_url = "$(params.chunks-url)"
          minio_endpoint = "$(params.minio-endpoint)"
          minio_access_key = "$(params.minio-access-key)"
          minio_secret_key = "$(params.minio-secret-key)"

          if not chunks_url.startswith("minio://"):
              print(f"‚ùå Invalid chunks_url: {chunks_url}")
              exit(1)
          path = chunks_url.replace("minio://", "", 1)
          bucket, object_name = path.split("/", 1)
          minio_client = Minio(
              minio_endpoint,
              access_key=minio_access_key,
              secret_key=minio_secret_key,
              secure=True
          )
          with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as temp_file:
              temp_path = temp_file.name
          minio_client.fget_object(bucket, object_name, temp_path)
          print(f"‚úÖ Downloaded chunks JSON from MinIO: {bucket}/{object_name}")

          with open(temp_path, 'r', encoding='utf-8') as f:
              chunks = json.load(f)
          os.unlink(temp_path)

          print(f"üìä Processing {len(chunks)} chunks")

          try:
              # Load model with CPU only to avoid GPU issues
              device = 'cpu'
              print(f"üß† Loading model on {device}...")
              model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2', device=device)
              print(f"‚úÖ Model loaded successfully")
              
              # Generate embeddings
              texts = [chunk['text'] for chunk in chunks]
              print(f"üîÑ Generating embeddings for {len(texts)} texts...")
              
              embeddings = model.encode(
                  texts, 
                  convert_to_numpy=True, 
                  normalize_embeddings=True,
                  show_progress_bar=True,
                  batch_size=8  # Small batch size to avoid memory issues
              )
              
              # Add embeddings to chunks
              for i, chunk in enumerate(chunks):
                  chunk['embedding'] = embeddings[i].tolist()
                  chunk['embedding_dim'] = len(embeddings[i])
                  chunk['embedding_model'] = 'sentence-transformers/all-MiniLM-L6-v2'
              
              result = json.dumps(chunks, ensure_ascii=False, indent=2)
              print(f"üéâ Successfully generated embeddings for {len(chunks)} chunks")
          
              # Save result to MinIO instead of Tekton results (too large)
              print(f"üì§ Uploading result to MinIO...")
              print(f"üìä Result size: {len(result)} characters ({len(result.encode('utf-8'))} bytes)")
              
              # Create filename based on original object
              original_object = "$(params.object-key)"
              timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
              result_filename = f"embeddings/{original_object}_{timestamp}_embeddings.json"
              
              # Upload to MinIO
              with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as temp_file:
                  temp_file.write(result)
                  temp_path = temp_file.name
              
              try:
                  minio_client.fput_object("processed-documents", result_filename, temp_path)
                  print(f"‚úÖ Result uploaded to MinIO: processed-documents/{result_filename}")
                  
                  # Clean up
                  os.unlink(temp_path)
                  
                  # Create small status result for Tekton
                  status_result = {
                      "status": "success",
                      "chunks_processed": len(chunks),
                      "result_location": f"minio://processed-documents/{result_filename}",
                      "result_size_bytes": len(result.encode('utf-8')),
                      "timestamp": timestamp
                  }
                  
                  # Write small status to Tekton results (this will fit in 4KB limit)
                  os.makedirs("/tekton/results", exist_ok=True)
                  status_path = "/tekton/results/status"
                  with open(status_path, "w", encoding='utf-8') as f:
                      f.write(json.dumps(status_result, ensure_ascii=False))
                  
                  print(f"‚úÖ Status written to Tekton results: {status_path}")
                  print(f"üìä Status size: {len(json.dumps(status_result))} characters")
                  
              except Exception as upload_error:
                  print(f"‚ùå Error uploading to MinIO: {upload_error}")
                  os.unlink(temp_path)
                  raise upload_error
                  
          except Exception as e:
              print(f"‚ùå Error in embedding generation: {str(e)}")
              import traceback
              traceback.print_exc()
              
              # Fallback status
              fallback_status = {
                  "status": "error",
                  "error_message": str(e),
                  "chunks_processed": 0,
                  "timestamp": datetime.now().strftime("%Y%m%d_%H%M%S")
              }
              
              os.makedirs("/tekton/results", exist_ok=True)
              with open("/tekton/results/status", "w") as f:
                  f.write(json.dumps(fallback_status, ensure_ascii=False))
              
              print("‚ö†Ô∏è Error status created")
        resources:
          requests:
            memory: 1Gi
            cpu: 200m
          limits:
            memory: 2Gi
            cpu: 500m
    params:
    - name: chunks-url
      value: $(tasks.chunk-text.results.chunks-url)
    - name: minio-endpoint
      value: $(params.minio-endpoint)
    - name: minio-access-key
      value: $(params.minio-access-key)
    - name: minio-secret-key
      value: $(params.minio-secret-key)
    - name: object-key
      value: $(params.object-key)

  - name: index-elasticsearch
    runAfter: ["generate-embeddings"]
    taskSpec:
      params:
      - name: minio-endpoint
      - name: minio-access-key
      - name: minio-secret-key
      - name: embeddings-status
        description: JSON de status de embeddings
      - name: elasticsearch-endpoint
        description: Endpoint de Elasticsearch
      - name: elasticsearch-username
        description: Usuario de Elasticsearch
      - name: elasticsearch-password
        description: Password de Elasticsearch
      steps:
      - name: index
        image: python:3.9
        script: |
          #!/usr/bin/env python3
          import os
          os.system("pip install --quiet minio requests")
          import json
          import tempfile
          from minio import Minio
          import requests

          print("üöÄ Starting indexing in Elasticsearch...")

          # Par√°metros
          minio_endpoint = "$(params.minio-endpoint)"
          minio_access_key = "$(params.minio-access-key)"
          minio_secret_key = "$(params.minio-secret-key)"
          embeddings_status = '$(params.embeddings-status)'
          es_endpoint = "$(params.elasticsearch-endpoint)"
          es_user = "$(params.elasticsearch-username)"
          es_pass = "$(params.elasticsearch-password)"

          print(f"[DEBUG] embeddings_status recibido: {embeddings_status}")
          try:
              status_obj = json.loads(embeddings_status)
              embeddings_location = status_obj.get('result_location', '')
          except Exception as e:
              print(f"‚ùå ERROR: No se pudo parsear embeddings_status: {e}")
              exit(1)

          print(f"[DEBUG] embeddings_location extra√≠do: {embeddings_location}")
          if not embeddings_location.startswith("minio://"):
              print(f"‚ùå ERROR: embeddings_location no comienza con minio://. Valor recibido: {embeddings_location}")
              exit(1)

          # Parsear bucket y objeto de la URL minio://bucket/objeto
          path = embeddings_location.replace("minio://", "", 1)
          bucket, object_name = path.split("/", 1)

          # Definir auth para Elasticsearch
          if es_user and es_pass:
              auth = (es_user, es_pass)
          else:
              auth = None

          # Descargar archivo de embeddings desde MinIO
          minio_client = Minio(
              minio_endpoint,
              access_key=minio_access_key,
              secret_key=minio_secret_key,
              secure=True
          )
          with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as temp_file:
              temp_path = temp_file.name
          minio_client.fget_object(bucket, object_name, temp_path)
          print(f"‚úÖ Embeddings descargados: {temp_path}")

          # Leer embeddings
          with open(temp_path, 'r', encoding='utf-8') as f:
              embeddings = json.load(f)

          # Indexar en Elasticsearch
          headers = {"Content-Type": "application/json"}
          if es_user and es_pass:
              auth = (es_user, es_pass)
          else:
              auth = None

          index_name = "rag-documents"
          success = 0
          fail = 0
          for chunk in embeddings:
              doc_id = chunk.get("chunk_id")
              resp = requests.put(
                  f"{es_endpoint}/{index_name}/_doc/{doc_id}",
                  headers=headers,
                  data=json.dumps(chunk, ensure_ascii=False),
                  auth=auth,
                  verify=False
              )
              if resp.status_code in (200, 201):
                  print(f"‚úÖ Indexado: {doc_id}")
                  success += 1
              else:
                  print(f"‚ùå Error indexando {doc_id}: {resp.text}")
                  fail += 1
          print(f"üéâ Indexaci√≥n completa. Exitosos: {success}, Fallidos: {fail}")
    params:
    - name: minio-endpoint
      value: {{ .Values.minioEndpoint }}
    - name: minio-access-key
      value: {{ .Values.minioAccessKey }}
    - name: minio-secret-key
      value: {{ .Values.minioSecretKey }}
    - name: embeddings-status
      value: $(tasks.generate-embeddings.results.status)
    - name: elasticsearch-endpoint
      value: {{ .Values.elasticsearchEndpoint | quote }}
    - name: elasticsearch-username
      value: {{ .Values.elasticsearchUsername | quote }}
    - name: elasticsearch-password
      value: {{ .Values.elasticsearchPassword | quote }}